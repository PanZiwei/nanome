	// Google cloud computing platform
		executor {
			name = 'google-lifesciences'
			pollInterval = '30 sec'
		}
		docker {
			enabled = true
			temp = 'auto'
		}

		google.zone = 'us-east1-b'
		google.lifeSciences.debug = true
		google.lifeSciences.preemptible = true
		google.lifeSciences.usePrivateAddress = false
		google.lifeSciences.sshDaemon = true
		google.lifeSciences.bootDiskSize = 30.GB
		google.enableRequesterPaysBuckets = true
		google.lifeSciences.network = 'jax-cloudos-shengli-vpc'
		google.lifeSciences.subnetwork = 'cloudos-subnet'

		// Include tools' gpu specific options
		params.processors = 16
		includeConfig 'conf/tool_options_on_gpu.config'

		// Include nanome input from google cloud storage
		includeConfig 'conf/gcp.config'

		process {
			container = params.glsContainerName
			machineType = params.machineType
			disk = params.midDiskSize

			maxRetries = params.max_retries
			errorStrategy = {task.attempt == process.maxRetries ? 'ignore' :  task.exitStatus in [8, 10, 14 ] ? 'retry' : 'ignore' }

			cache = 'lenient'
			echo = params.echo

			// withName must inherit process attributes
			withName: EnvCheck {
				machineType = params.machineTypeLowCost
				disk = params.lowDiskSize  // need enough spaces for genome reference, such as +   150.GB * task.attempt
				accelerator = [request:  params.gpuNumberLowCost, type: params.gpuTypeLowCost ]
			}

			withName: Untar {
				machineType = params.machineType
				errorStrategy = { task.attempt == process.maxRetries ? 'ignore' : task.exitStatus in [9, 14] ? 'retry' : 'ignore' }
			}

			withName: Basecall {
				machineType = params.machineType
				accelerator = [request:  params.gpuNumber, type: params.gpuType ]
				errorStrategy = { task.attempt == process.maxRetries ? 'ignore' : task.exitStatus in [9, 14] ? 'retry' : 'ignore' }
			}

			withName: Guppy {
				machineType = params.machineType
				accelerator = [request:  params.gpuNumber, type: params.gpuType ]
				errorStrategy = { task.attempt == process.maxRetries ? 'ignore' : task.exitStatus in [9, 14] ? 'retry' : 'ignore' }
			}

			withName: Megalodon {
				machineType = params.machineType
				accelerator = [request:  params.gpuNumber, type: params.gpuType ]
				errorStrategy = { task.attempt == process.maxRetries ? 'ignore' : task.exitStatus in [9, 14] ? 'retry' : 'ignore' }
			}

			withName: DeepSignal {
				machineType = params.machineType
				disk = params.midDiskSize
			 	errorStrategy = { task.attempt == process.maxRetries ? 'ignore' : task.exitStatus in [8, 10, 14 ] ? 'retry' : 'ignore' }
			}

			withName: Resquiggle {
				machineType = params.machineType
				errorStrategy = { task.attempt == process.maxRetries ? 'ignore' : task.exitStatus in [9, 14] ? 'retry' : 'ignore' }
			}

			withName: Tombo {
				machineType = params.machineType
				disk = params.midDiskSize
				errorStrategy = { task.attempt == process.maxRetries ? 'ignore' : task.exitStatus in [14, 32] ? 'retry' : 'ignore' }
			}

			withName: Nanopolish {
				machineType = 'custom-20-133120'  // 130GB memory
				errorStrategy = { task.attempt == 5 ? 'ignore' : task.exitStatus in [14, 139] ? 'retry' : 'ignore' }
			}

		}
